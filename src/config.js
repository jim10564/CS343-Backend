const path = require('path');

const config = {
  ROOT_DIR: __dirname,
  URL_PORT: 10001,
  URL_PATH: 'http://localhost',
  BASE_VERSION: '',
  CONTROLLER_DIRECTORY: path.join(__dirname, 'controllers'),
  PROJECT_DIR: __dirname,
};

config.OPENAPI_YAML = path.join(config.ROOT_DIR, 'api', 'openapi.yaml');
config.FULL_PATH = `${config.URL_PATH}:${config.URL_PORT}/${config.BASE_VERSION}`;
config.FILE_UPLOAD_PATH = path.join(config.PROJECT_DIR, 'uploaded_files');


// CUSTOMIZATIONS =======================================================
// config.js is generated by openapi-generator-cli.
// This section is a customization to what was generated.


// Add a SCHEMA config that contains the parsed openapi specification.
// This might be a bit of an abuse of config because config should
// probably have only simple values. However, the openapi specification
// is really part of the configuration of this application. So from
// that perspective, it makes sense.
const jsYaml = require("js-yaml");
const fs = require("fs");
const openapi_yaml_string = fs.readFileSync(config.OPENAPI_YAML);
const openapi_yaml_object = jsYaml.safeLoad(openapi_yaml_string);
config.SCHEMA = openapi_yaml_object;


function ensureStartsWith(string, prefix) {
  if (!string.startsWith(prefix)) {
    return prefix + string;
  }
  return string;
}

function ensureStartsWithIfNotEmpty(string, prefix) {
  if (string !== "") {
    return ensureStartsWith(string, prefix);
  }
  return string;
}

// BASE_VERSION is derived from the API version given in schema, and NOT from
// the URL given in the services section of the specification.
config.BASE_VERSION = ensureStartsWith(config.SCHEMA.info.version.split(".")[0], "v");

// URL_PROTOCOL is either http or https.
config.URL_PROTOCOL = process.env.URL_PROTOCOL;

// URL_SERVER can be a domain name or IP address.
config.URL_SERVER = process.env.URL_SERVER;

// URL_PATH is everthing before the port.
// Note that this is different from the environment variable URL_PATH.
// Then environment variable represents the path component of the URL.
// The config.URL_PATH is the protocol + server part of the URL.
// Since this is the meaning that the generator produceds, we do
// not change its meaning here.
config.URL_PATH = config.URL_PROTOCOL + "://" + config.URL_SERVER;

// URL_PORT the port assigned to the service.
config.URL_PORT = process.env.URL_PORT;

// FULL_PATH
// It really should be called FULL_URL. But this is what the generator
// generates. So we work with it.
const protocol = config.URL_PROTOCOL;
const server = ensureStartsWith(config.URL_SERVER, "://");
const port = ensureStartsWithIfNotEmpty(config.URL_PORT, ":");
const url_path = ensureStartsWithIfNotEmpty(process.env.URL_PATH, "/");
const version = ensureStartsWithIfNotEmpty(config.BASE_VERSION, "/");
config.FULL_PATH = `${protocol}${server}${port}${url_path}${version}`;

// Replace the URL in the SCHEMA with FULL_PATH
// so the interactive documentation works properly.
config.SCHEMA.servers[0].url = config.FULL_PATH;

config.MONGO_URI = process.env.MONGO_URI;
// End of CUSTOMIZATIONS ===============================================

module.exports = config;
