#!/bin/bash

# -e: Exit on first error.
# -u: Reading an undefined variable is an error.
set -eu

# Identify the directory containing this script.
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Load environment variables.
source "${DIR}/dev.env"

function setup(){
    build-development-tools
    start-development-environment
    build-proctor-image
}

function cycle(){
    stop
    build
    start
    run-tests
}

function teardown(){
    stop-development-environment
}

##########################################
# Development Tools

function build-development-tools(){
    build-proctor-image
}

function npm(){
    docker run -it --rm  -v "${PWD}:/workdir" -w "/workdir" "${NODE_IMAGE}" npm "$@"
}

function build-proctor-image(){
    banner-in
    docker build --build-arg "NODE_IMAGE=${NODE_IMAGE}" -t proctor testing/proctor
    banner-out
}

function run-tests(){
    banner-in
    # Note that mocha wants the tests (plural) in a directory named test (singular).
    # So the plural to singular mapping here is intentional.
    docker run -it --rm \
        -e SUT_BASE_URL="${SUT_SERVER_URL}" \
        -e TEST_TIMEOUT_MS="${TEST_TIMEOUT_MS}" \
        -v "${PWD}/testing/tests:/app/test" \
        -v "${PWD}/src/openapi.yaml:/app/openapi.yaml" \
        --network "${TEST_NETWORK}" proctor "$@"
    banner-out
}

##########################################
# Build commands

function build(){
    build-image
}

function build-image(){
    banner-in
    docker build --build-arg NODE_IMAGE="${NODE_IMAGE}" -t "${IMAGE}" .
    banner-out
}

##########################################
# Development Environment

function start-development-environment(){
    create-docker-network "${TEST_NETWORK}"
}

function stop-development-environment(){
    banner-in
    if docker ps -q -f network="${TEST_NETWORK}" | grep . > /dev/null
    then
        docker stop $(docker ps -q -f network="${TEST_NETWORK}")
        echo "Containers on ${TEST_NETWORK} have been stopped."
    else
        echo "No containers on ${TEST_NETWORK} found."
    fi

    echo "Removing all containers on network ${TEST_NETWORK}"
    if docker ps -aq -f network="${TEST_NETWORK}" | grep . > /dev/null
    then
        docker rm $(docker ps -aq -f network="${TEST_NETWORK}")
        echo "All container on ${TEST_NETWORK} removed."
    else
        echo "No containers on ${TEST_NETWORK} found."
    fi
    banner-out

    remove-docker-network "${TEST_NETWORK}"
}

function create-docker-network(){
    banner-in "$@"
    if docker network ls | grep "${1}$" > /dev/null
    then
        echo "${1} exists"
    else
        docker network create "${1}"
        echo "${1} created."
    fi
    banner-out "$@"
}

function remove-docker-network(){
    banner-in "$@"
    if docker network ls | grep "${1}$" ; then
        docker network rm "${1}"
        echo "${1} removed."
    else
        echo "${1} does not exist."
    fi
    banner-out "$@"
}

##########################################
# Demo commands

function start(){
    start-mongo
    start-backend
}

function stop(){
    stop-and-remove-docker-container "${NAME}"
    stop-and-remove-docker-container "${MONGO_NAME}"
}

function restart(){
    stop
    start
}

function restart-backend(){
    stop-backend
    start-backend
}

function start-backend(){
    banner-in
    docker run --detach \
        --network ${TEST_NETWORK} \
        --name "${NAME}" \
        -p "${SUT_HOST_URL_PORT}:${SUT_SERVER_URL_PORT}" \
        -e HOST_BASE_URL="${SUT_HOST_URL}" \
        -e MONGO_URI="${MONGO_URI}" \
        "${IMAGE}"
    banner-out
}

function start-mongo(){
    banner-in
    docker run \
        --detach \
        --network "${TEST_NETWORK}" \
        --expose 27017 \
        --name "${MONGO_NAME}" \
        "${MONGO_IMAGE}"
    banner-out
}

##########################################
# Start and stop docker containers

function stop-and-remove-docker-container(){
    stop-docker-container "${1}"
    remove-docker-container "${1}"
}

function stop-docker-container(){
    banner-in "$@"
    if docker ps | grep "${1}$"
    then
        docker stop "${1}"
    else
        echo "${1} is not running."
    fi
    banner-out "$@"
}

function remove-docker-container(){
    banner-in
    if docker ps -a | grep "${1}$"
    then
        docker rm "${1}"
    else
        echo "${1} does not exist."
    fi
    banner-out
}

##########################################
# Logs

function logs(){
    mongo-logs
    backend-logs
}

function mongo-logs(){
    banner-in
    docker logs "${MONGO_NAME}"
    banner-out
}

function backend-logs(){
    banner-in
    docker logs "${NAME}"
    banner-out
}

##########################################
# Banners

function banner-in(){
    echo
    echo "========= BEGIN $0 ${FUNCNAME[1]} ${@:1} ===================="
}

function banner-out(){
    echo "========= END $0 ${FUNCNAME[1]} ${@:1} ======================"
    echo
}

# Run build if we were called (not sourced) from the command line.
if [[ "${BASH_SOURCE[0]}" == "${0}" ]] ; then
    # Run the subcommand requested... for example `./demo restart` runs restart()
    "$@"
fi
